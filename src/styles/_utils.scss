@import './colors';
.row {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  height: auto;
}

.column {
  display: flex;
  flex-direction: column;
}

.full-height {
  height: 100%;
}

.projects-feed-component {
  min-height: 40%;
  border-top: 1px solid lighten($background, 10%);
  &::before {
    content:"";
    display:block;
    position:absolute;
    z-index:-1;
    top: 0;
    left: 0;
    right: 0;
    top: -2px;
    border-top: 1px solid lighten($background, 50%);
  }
}

@mixin border($direction, $size, $type, $color) {
  @if($direction == "none") {
    border: $size + px $type $color;
  }
  @if($direction == "top") {
    border-top: $size + px $type $color;
  }
  @if($direction == "left") {
    border-left: $size + px $type $color;
  }
  @if($direction == "right") {
    border-right: $size + px $type $color;
  }
  @if($direction == "bottom") {
    border-bottom: $size + px $type $color;
  }
}

/*
  $direction: none, top, bottom, right, left
  $size: border-size property
  $color: border-color proerty
  $before-or-after: shows the border before or after the first border, default: "before"
*/
@mixin double-border($direction, $size, $type, $color, $before-or-after: "before") {

  @if ($before-or-after == "after") {
    $inverter: 1;
  } @else {
    $inverter: -1;
  }
  @include border($direction, $size, $type, $color);
  &::before {
    content:"";
    display:block;
    position:absolute;
    z-index:-1;
    // default values
    top: 0;
    left: 0;
    right: 0;
    top: 0;
    // move the second border to before or after the first border
    // times 2 because the second border will have the same size and need to start at the end of the first
    $dislocation: ($size * 2) * $inverter;
    @if ($direction == "top") {
      top: $dislocation + px;
    }
    @if ($direction == "left") {
      left: $dislocation + px;
    }
    @if ($direction == "right") {
      right: $dislocation + px;
    }
    @if ($direction == "bottom") {
      bottom: $dislocation + px;
    }
    @include border($direction, $size, $type, $color);
  }
}

.clickable {
  cursor: pointer;
}
